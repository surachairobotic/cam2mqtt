import cv2
import time
import base64
import paho.mqtt.client as mqtt
from dotenv import load_dotenv
import os
import subprocess
from datetime import datetime

# Load environment variables from .env file
load_dotenv()

MQTT_BROKER = os.getenv("MQTT_BROKER")
MQTT_PORT = int(os.getenv("MQTT_PORT", 1883))
MQTT_TOPIC = os.getenv("MQTT_TOPIC")
MQTT_USERNAME = os.getenv("MQTT_USERNAME")
MQTT_PASSWORD = os.getenv("MQTT_PASSWORD")

def log(message):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}")

def log(message):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}")

def on_connect(client, userdata, flags, reason_code, properties):
    if reason_code == 0:
        log("‚úÖ Connected to MQTT broker successfully.")
    else:
        log(f"‚ùå Connection failed with reason code {reason_code}")

def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):
    log(f"üîå Disconnected with reason code {reason_code}")

def is_connected(host="8.8.8.8"):
    try:
        subprocess.check_call(["ping", "-c", "1", host], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def restart_wifi():
    log("üîÑ Restarting Wi-Fi connection...")

    # Bring the network interface down
    os.system("sudo ifconfig wlan0 down")
    time.sleep(2)
    os.system("sudo ifconfig wlan0 up")
    time.sleep(5)
    log("‚úÖ Wi-Fi connection restarted.")

# Initialize MQTT client
client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
client.on_connect = on_connect
client.on_disconnect = on_disconnect
client.connect(MQTT_BROKER, MQTT_PORT)
client.loop_start()

# Open the USB camera (default /dev/video0)
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    log("‚ùå Could not open camera.")
    exit()

disconnect_count = 0

try:
    while True:
        start_loop_time = time.time()
        log("‚è≥ Starting capture loop...")

        ret, frame = cap.read()
        capture_time = time.time()

        if not ret:
            log("‚ö†Ô∏è Failed to capture image.")
            continue
        else:
            height, width, channels = frame.shape
            log(f"Width: {width}, Height: {height}, Channels: {channels}")

        log(f"üì∑ Image captured. Time taken: {capture_time - start_loop_time:.3f} seconds")

        log(f"üì∑ Image captured. Time taken: {capture_time - start_loop_time:.3f} seconds")

        # Encode the frame as JPEG
        _, buffer = cv2.imencode('.jpg', frame)
        encode_time = time.time()

        log(f"üñºÔ∏è Image encoded to JPEG. Time taken: {encode_time - capture_time:.3f} seconds")

        # Convert to base64
        jpg_as_text = base64.b64encode(buffer).decode('utf-8')
        base64_time = time.time()

        log(f"üìù Image encoded to Base64. Time taken: {base64_time - encode_time:.3f} seconds")

        if is_connected():
            log("üåê Network is connected. Publishing to MQTT...")

            publish_start = time.time()
            result = client.publish(MQTT_TOPIC, jpg_as_text)
            result.wait_for_publish()  # Wait until published for accurate timing
            publish_end = time.time()

            log(f"üì° Image published to {MQTT_TOPIC}. Time taken: {publish_end - publish_start:.3f} seconds")
            log(f"‚úÖ Loop completed successfully. disconnect_count={disconnect_count}")
            disconnect_count = 0
        else:
            log("‚ùå No network connection.")
            disconnect_count += 1

        if disconnect_count >= 60:
            restart_wifi()

        total_loop_time = time.time() - start_loop_time
        log(f"‚è≤Ô∏è Total loop time: {total_loop_time:.3f} seconds\n")

<<<<<<< HEAD
        time.sleep(0.01)

except KeyboardInterrupt:
    log("üõë Stopping...")

        time.sleep(CAPTURE_INTERVAL)

except KeyboardInterrupt:
    log("üõë Stopping...")

finally:
    cap.release()
    client.loop_stop()
    client.disconnect()
